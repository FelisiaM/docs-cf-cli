---
title: Getting Started with the cf CLI
owner: CLI
---

This topic describes configuring and getting started with the Cloud Foundry Command Line Interface (cf CLI).

## Prerequisite

To do the procedures in this topic, you must download and install the latest version of the cf CLI. See [Installing the Cloud Foundry Command Line Interface](./install-go-cli.html).

## <a id='login'></a> Log In With the CLI

The `cf login` command uses the following syntax to specify a target API endpoint, an org, and a space. 

The cf CLI prompts for credentials as needed. If you are a member of multiple orgs or spaces, `cf login` prompts you for which ones to log into. Otherwise it targets your org and space automatically.

To log in to the cf CLI:

```
cf login -a API_URL -u USERNAME -p PASSWORD -o ORG -s SPACE
```

Where:  

* `API_URL`: This is your API endpoint, <%=vars.api_endpoint%>.
* `USERNAME`: Your username.
* `PASSWORD`: Your password. Use of the `-p` option is discouraged as it may record your password in your shell history. 
* `ORG`: The org where you want to deploy your apps.
* `SPACE`: The space in the org where you want to deploy your apps.

<pre class="terminal">
$ cf login -a https://api.example.com -u username<span>@</span>example.com
API endpoint: https://api.example.com

Password>
Authenticating...
OK

Select an org (or press enter to skip):
1. example-org
2. example-other-org

Org> 1
Targeted org example-org

Select a space (or press enter to skip):
1. development
2. staging
3. production

Space> 1
Targeted space development

</pre>

## <a id='login'></a> Log In With the API

You can write a script to log in and set your target using the non-interactive [cf api](http://cli.cloudfoundry.org/en-US/cf/api.html), [cf auth](http://cli.cloudfoundry.org/en-US/cf/auth.html), and [cf target](http://cli.cloudfoundry.org/en-US/cf/target.html) commands.

After you log in, the cf CLI saves a `config.json` file that contains your API endpoint, org, space values, and access token.

If you change these settings, the `config.json` file is updated accordingly.

By default, `config.json` is located in the `~/.cf` directory. The `CF_HOME` environment variable allows you to relocate the `config.json` file.

##<a id='i18n'></a> Localize the CLI

The cf CLI translates terminal output into the language that you select. The default language is <code>en-US</code>. 

The cf CLI supports the following languages:

*  Chinese (simplified): <code>zh-Hans</code>
*  Chinese (traditional): <code>zh-Hant</code>
*  English: <code>en-US</code>
*  French: <code>fr-FR</code>
*  German: <code>de-DE</code>
*  Italian: <code>it-IT</code>
*  Japanese: <code>ja-JP</code>
*  Korean: <code>ko-KR</code>
*  Portuguese (Brazil): <code>pt-BR</code>
*  Spanish: <code>es-ES</code>

For more information, see [config](http://cli.cloudfoundry.org/en-US/cf/config.html) in _Cloud Foundry CLI Reference Guide_.

To set the language of the cf CLI:

1. Log in to the cf CLI. 

1. Run the following command:

    ```
    $ cf config --locale YOUR_LANGUAGE
    ``` 
    Where YOUR_LANGUAGE is the desired language.
    
    For example:
    <pre class="terminal">
    $ cf config --locale pt-BR
    </pre> 
    <p class='note'><strong>Note</strong>: Localization with <code>cf config --locale</code> affects only messages that the cf CLI generates. </p>

1. Confirm the language change:

    ```
    cf help
    ```
    
    For example:

    <pre class="terminal">

    $ cf help
    NOME:
       cf - Uma ferramenta de linha de comando para interagir com Cloud Foundry

    USO:
       cf [opções globais] comando [argumentos...] [opções de comando]

    VERSÃO:
       6.14.1+dc6adf6-2015-12-22
       ...
    </pre>


## <a id='user-roles'></a> Manage Users and Roles

The cf CLI includes commands that list users and assign roles in orgs and spaces. For more information, see [Orgs, Spaces, Roles, and Permissions](https://docs.cloudfoundry.org/concepts/roles.html).

### <a id='listing-users'></a> List Users

The following commands list users in an org or a space:

* `cf org-users`. See [org-users](http://cli.cloudfoundry.org/en-US/cf/org-users.html) in the _Cloud Foundry CLI Reference Guide_

* `cf space-users`. See [space-users](http://cli.cloudfoundry.org/en-US/cf/space-users.html) in the _Cloud Foundry CLI Reference Guide_.

The following example shows the cf CLI output for listing the users of an org:

<pre class="terminal">
$ cf org-users example-org
Getting users in org example-org as username<span>@</span>example.com...

ORG MANAGER
  username<span>@</span>example.com

BILLING MANAGER
  huey<span>@</span>example.com
  dewey<span>@</span>example.com

ORG AUDITOR
  louie<span>@</span>example.com
</pre>

### <a id='managing-roles'></a> Manage Roles

The following commands can be used to manage roles in the cf CLI. These commands require <%=vars.product_short%> admin permissions and take username, org or space, and role as arguments:

* `cf set-org-role`. See [set-org-role](http://cli.cloudfoundry.org/en-US/cf/set-org-role.html) in the _Cloud Foundry CLI Reference Guide_.

* `cf unset-org-role`. See [unset-org-role](http://cli.cloudfoundry.org/en-US/cf/unset-org-role.html) in the _Cloud Foundry CLI Reference Guide_.

* `cf set-space-role`. See [set-space-role](http://cli.cloudfoundry.org/en-US/cf/set-space-role.html) in the _Cloud Foundry CLI Reference Guide_.

* `cf unset-space-role`. See [unset-space-role](http://cli.cloudfoundry.org/en-US/cf/unset-space-role.html) in the _Cloud Foundry CLI Reference Guide_.

The following are the available roles:

* `OrgManager`

* `BillingManager` 

* `OrgAuditor` 

* `SpaceManager`

* `SpaceDeveloper`

* `SpaceAuditor` 

The following example shows the cf CLI output for assigning the Org Manager role to a user within an org:

<pre class="terminal">
$ cf set-org-role huey@example.com example-org OrgManager

Assigning role OrgManager to user huey<span>@</span>example.com in org example-org as username<span>@</span>example.com...
OK
</pre>

<p class="note"><strong>Note</strong>: If you are not a <%=vars.product_short%> admin, you see this message when you try to run these commands:
<code>error code: 10003, message: You are not authorized to perform the requested action</code></p>

### <a id='multi-origin'></a> Manage Roles for Users with Identical Usernames in Multiple Origins

If a username corresponds to multiple accounts from different user stores, such as both the internal UAA store and an external SAML or LDAP store, the `cf set-org-role` 
and the `cf unset-org-role` commands above return the following error:

<pre class="terminal">The user exists in multiple origins. Specify an origin for the requested user from: ‘uaa’, ‘other’</pre>

To resolve this ambiguity, construct a `curl` command that uses the CF API to perform the desired role-management function. For an example, see the [PUT v2/organizations/:guid/auditors](http://apidocs.cloudfoundry.org/280/organizations/associate_auditor_with_the_organization_by_username.html) API function.

## <a id='push'></a> Push an App

The `cf push` command pushes a new app or syncs changes to an existing app. 

For more information, see [push](http://cli.cloudfoundry.org/en-US/cf/push.html) in the _Cloud Foundry CLI Reference Guide_.

### <a id='push-procedure'></a> Push a New App or Push Changes to an App

The following procedure describes how to push an app from the cf CLI. 

To push an app without a manifest file:

1. Log in to the cf CLI:
    
    ```
    cf login
    ```

1. Navigate to the directory of the app. 

1. Push a new app or push changes to an app:

    ```
    cf push APP-NAME
    ```
    Where `APP-NAME` is the name of the app. 


### <a id='push-path'></a> Push an App Using a Manifest 

You can provide a path to a manifest file when you push an app. The manifest file may include information such as the name of the app, disk limit, and number of instances. You can use a manifest file rather than adding flags to the `cf push` command. 

`cf push` locates the `manifest.yml` file in the current working
directory by default. Or, you can provide a path to the manifest with the `-f` flag.

For more information, see [push](http://cli.cloudfoundry.org/en-US/cf/push.html) in the _Cloud Foundry CLI Reference Guide_. 

<p class="note"><strong>Note</strong>: When you provide an app name at the command line, <code>cf push</code> uses that app name whether or not there is a different app name in the manifest. If the manifest describes multiple apps, you can push a single app by providing its name at the command line; the cf CLI does not push the others. Use these behaviors for testing.</p> 


### <a id='push-buildpack'></a> Push an App with a Buildpack

You can specify a buildpack when you push an app with the `-b` flag. If you use the `-b` flag to specify a buildpack, the app remains permanently linked to that buildpack. To use the app with a different buildpack, you must delete the app and then push it again.

For more information about available buildpacks, see [Buildpacks](https://docs.cloudfoundry.org/buildpacks/).

The following example pushes an app called `my-awesome-app` to the URL `http://my-awesome-app.example.com` and specifies the Ruby buildpack with the `-b` flag:

<pre class="terminal">
$ cf push my-awesome-app -b ruby_buildpack
Creating app my-awesome-app in org example-org / space development as username@example.com...
OK

Creating route my-awesome-app.example.com...
OK
...

1 of 1 instances running

App started
...

requested state: started
instances: 1/1
usage: 1G x 1 instances
urls: my-awesome-app.example.com
last uploaded: Wed Jun 8 23:43:15 UTC 2016
stack: cflinuxfs3
buildpack: ruby_buildpack

     state     since                    cpu    memory    disk      details
#0   running   2016-06-08 04:44:07 PM   0.0%   0 of 1G   0 of 1G
</pre>


### <a id='new-route'></a> Map a Route to an App

You can use the `--hostname` flag with the `cf push` command to provide a hostname for your app.

If you do not provide a hostname, `cf push` routes your app to a URL of the form `APPNAME.DOMAIN`, where `APPNAME` is the name of your app and `DOMAIN` is your default domain. 

For information about mapping a route to your app, see [Routes and Domains](https://docs.cloudfoundry.org/devguide/deploy-apps/routes-domains.html). 


## <a id='user-provided'></a> Create or Update User-Provided Service Instances

To create or update a user-provided service instance, you need to supply basic parameters. For example, a database service might require a username, password, host, port, and database name.

You can provide these parameters in the following ways using the cf CLI: 

* Interactively 
* Non-interactively 
* With third-party log management software as described in [RFC 6587](http://tools.ietf.org/html/rfc6587). When used with third-party logging, the cf CLI sends data formatted according to [RFC 5424](http://tools.ietf.org/html/rfc5424).

### <a id='user-cups'></a> Create a Service Instance

To create a new service instance, use `cf create-user-provided-service` or `cf cups`. See [create-user-provided-service` or `cf cups`. See [cf cups](http://cli.cloudfoundry.org/en-US/cf/](http://cli.cloudfoundry.org/en-US/cf/create-user-provided-service.html) in the _Cloud Foundry CLI Reference Guide_.

You can do one of the following to create a service instance:

* **To supply service instance parameters interactively:**
* **To supply service instance parameters to `cf cups` non-interactively:**
* 


**To supply service instance parameters interactively:** Specify parameters in a comma-separated list after the `-p` flag. This example command-line session creates a service instance for a database service.  

  <pre class="terminal">$ cf cups sql-service-instance -p "host, port, dbname, username, password"
host> mysql.example.com
port> 1433
dbname> mysqldb
username> admin
password> Pa55w0rd
Creating user provided service sql-service-instance in org example-org / space development as username@example.com...
OK
</pre>

**To supply service instance parameters to `cf cups` non-interactively:** Pass parameters and their values in as a JSON hash, bound by single quotes, after the `-p` tag. This example is a non-interactive version of the `cf cups` session above.

  <pre class="terminal">$ cf cups sql-service-instance -p '{"host":"mysql.example.com", "port":"1433", "dbname":"mysqldb", "username":"admin","password":"pa55woRD"}'
Creating user provided service sql-service-instance in org example-org / space development as username<span>@</span>example.com...
OK
</pre>

**To create a service instance that sends data to a third-party:** Use the `-l` option followed by the external destination URL. This example creates a service instance that sends log information to the syslog drain URL of a third-party log management service. For specific log service instructions, see the [Service-Specific Instructions for Streaming Application Logs](https://docs.cloudfoundry.org/devguide/services/log-management-thirdparty-svc.html) topic.

  <pre class="terminal">$ cf cups mylog -l syslog://logs4.example.com:25258
Creating user provided service mylog in org example-org / space development as username<span>@</span>example.com...
OK
</pre>

After you create a user-provided service instance, you bind it to an app with [cf bind-service](http://cli.cloudfoundry.org/en-US/cf/bind-service.html), 
unbind it with [cf unbind-service](http://cli.cloudfoundry.org/en-US/cf/unbind-service.html), rename it with [cf rename-service](http://cli.cloudfoundry.org/en-US/cf/rename-service.html), and delete it with [cf delete-service](http://cli.cloudfoundry.org/en-US/cf/delete-service.html).

### <a id='user-uups'></a> Update a Service Instance ###

To update one or more of the parameters for an existing user-provided service instance, use `cf update-user-provided-service` or `cf uups`. 

For more information, see [update-user-provided-service](http://cli.cloudfoundry.org/en-US/cf/update-user-provided-service.html) in the _Cloud Foundry CLI Reference Guide_.

The `cf uups` command does not update any parameter values that you do not supply.

## <a id='return-codes'></a> Retrieve cf CLI Return Codes

The cf CLI uses exit codes, which help with scripting and confirming that a command has run successfully. For example, after you run a cf CLI command, you can retrieve its return code by running `echo $?` (on Windows, `echo %ERRORLEVEL%`). If the return code is `0`, the command was successful.

## <a id='help'></a> View CLI Help Output

The [cf help](http://cli.cloudfoundry.org/en-US/cf) command lists the cf CLI commands and a brief description of each.
Passing the `-h` flag to any command lists detailed help, including any aliases. For example, to see detailed help for `cf delete`, run:

<pre class="terminal">
$ cf delete -h
NAME:
   delete - Delete an app

USAGE:
   cf delete APP_NAME [-f -r]

ALIAS:
   d

OPTIONS:
   -f       Force deletion without confirmation
   -r       Also delete any mapped routes
</pre>

